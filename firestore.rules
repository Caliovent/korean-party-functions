rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow public read access for user profiles, but only owners can write.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow authenticated users to read game data.
    // Modifications to games are handled by Cloud Functions.
    match /games/{gameId} {
      allow read: if request.auth != null;
      // Typically, game writes are restricted to backend logic.
      // Allow create/update/delete only if explicitly needed for client and secured.
      // For now, assume Cloud Functions handle writes.
      allow write: if false; // Or more specific rules if clients need to write directly
    }

    // Rules for hub_state collection
    match /hub_state/{playerId} {
      // Any authenticated user can read hub_state to see other players.
      allow read: if request.auth != null;

      // A player can create, update, and delete their own hub_state document.
      allow create: if request.auth != null && request.auth.uid == playerId
                      && request.resource.data.uid == request.auth.uid // Ensure uid in doc matches
                      && request.resource.data.x is number // Validate data types
                      && request.resource.data.y is number
                      && request.resource.data.displayName is string
                      && request.resource.data.lastSeen is timestamp;
                      // inGame can be null or string, harder to validate precisely here for create only
                      // It's often set by backend functions anyway.

      allow update: if request.auth != null && request.auth.uid == playerId
                      // Check that fields being updated are permissible if needed
                      // For example, prevent client from updating inGame directly if only backend should
                      && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid'])); // uid cannot be changed

      allow delete: if request.auth != null && request.auth.uid == playerId;
    }

    // Placeholder for other collections if any (e.g., learningItemsStatus)
    // match /users/{userId}/learningItemsStatus/{itemId} {
    //   allow read, write: if request.auth != null && request.auth.uid == userId;
    // }

    // Rules for Game Content Collections (read-only for clients)
    match /koreanContentBible/{wordId} {
      allow read: if request.auth != null;
      allow write: if false; // Content managed by Observatory only
    }
    match /questDefinitions/{questId} {
      allow read: if request.auth != null;
      allow write: if false; // Content managed by Observatory only
    }
    match /spellDefinitions/{spellId} {
      allow read: if request.auth != null;
      allow write: if false; // Content managed by Observatory only
    }
    match /syllablePuzzles/{puzzleId} {
      allow read: if request.auth != null;
      allow write: if false; // Content managed by Observatory only
    }
    match /foodItemDefinitions/{itemId} {
      allow read: if request.auth != null;
      allow write: if false; // Content managed by Observatory only
    }
    // Add other content collections here following the same pattern

    // Player's quest data
    match /playerQuests/{userId} {
      // Allow user to access their own quest documents root, but not necessarily list all users' quest roots.
      // Specific rules for subcollections below.
      allow get: if request.auth != null && request.auth.uid == userId; // Allow read of the user's own playerQuests document (if it exists)
      allow list: if false; // Don't allow listing all playerQuests documents for all users

      // Active quests for a player
      match /activeQuests/{questDocId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        // Writes (create, update, delete) are handled by Cloud Functions.
        // acceptQuest (create), submitGameAction (update), completeQuest (delete from active)
        // For TDD, tests might directly manipulate if function doesn't exist yet.
        // If functions run with user's auth context, this rule would be:
        // allow write: if request.auth != null && request.auth.uid == userId;
        // If functions run with admin privileges, client writes should be false.
        // For now, to support tests and initial function dev:
        allow write: if request.auth != null && request.auth.uid == userId;
      }

      // Completed quests for a player
      match /completedQuests/{questDocId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        // Writes (create) are handled by Cloud Functions (completeQuest)
        allow write: if false; // Client should not directly write to completedQuests
      }
    }
  }
}
